var cov_1zyoysbufy=function(){var path="/home/marta/bootcamp/collab/skylab-bootcamp-201909/staff/marta-penya/wishare/wishare-api/logic/search-users/index.js";var hash="801de6e30d653428c999eadf09838f21a53354e0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/marta/bootcamp/collab/skylab-bootcamp-201909/staff/marta-penya/wishare/wishare-api/logic/search-users/index.js",statementMap:{"0":{start:{line:1,column:39},end:{line:1,column:62}},"1":{start:{line:2,column:46},end:{line:2,column:69}},"2":{start:{line:12,column:1},end:{line:28,column:1}},"3":{start:{line:14,column:4},end:{line:14,column:26}},"4":{start:{line:15,column:4},end:{line:15,column:43}},"5":{start:{line:17,column:4},end:{line:27,column:8}},"6":{start:{line:18,column:8},end:{line:18,column:16}},"7":{start:{line:20,column:20},end:{line:20,column:106}},"8":{start:{line:22,column:8},end:{line:22,column:93}},"9":{start:{line:22,column:32},end:{line:22,column:93}},"10":{start:{line:24,column:8},end:{line:24,column:81}},"11":{start:{line:24,column:32},end:{line:24,column:62}},"12":{start:{line:24,column:63},end:{line:24,column:78}},"13":{start:{line:26,column:8},end:{line:26,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:18},end:{line:12,column:19}},loc:{start:{line:12,column:35},end:{line:28,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:17,column:12},end:{line:17,column:13}},loc:{start:{line:17,column:24},end:{line:27,column:5}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:24,column:22},end:{line:24,column:23}},loc:{start:{line:24,column:30},end:{line:24,column:80}},line:24}},branchMap:{"0":{loc:{start:{line:22,column:8},end:{line:22,column:93}},type:"if",locations:[{start:{line:22,column:8},end:{line:22,column:93}},{start:{line:22,column:8},end:{line:22,column:93}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"801de6e30d653428c999eadf09838f21a53354e0"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{ObjectId,models:{User}}=(cov_1zyoysbufy.s[0]++,require('wishare-data'));const{validate,errors:{NotFoundError}}=(cov_1zyoysbufy.s[1]++,require('wishare-util'));/**
 * Retrieves users that matches the email with the query provided.
 * 
 *@param {String} email of user that want to be searched
 *
 *@returns {Promise} with friends matched
 */cov_1zyoysbufy.s[2]++;module.exports=function(query){cov_1zyoysbufy.f[0]++;cov_1zyoysbufy.s[3]++;validate.string(query);cov_1zyoysbufy.s[4]++;validate.string.notVoid('query',query);cov_1zyoysbufy.s[5]++;return(async()=>{cov_1zyoysbufy.f[1]++;cov_1zyoysbufy.s[6]++;debugger;let users=(cov_1zyoysbufy.s[7]++,await User.find({"email":{$regex:`.*${query}*`}},{password:0,__v:0}).lean());cov_1zyoysbufy.s[8]++;if(users.length===0){cov_1zyoysbufy.b[0][0]++;cov_1zyoysbufy.s[9]++;throw new NotFoundError(`user with email ${query} not found`);}else{cov_1zyoysbufy.b[0][1]++;}cov_1zyoysbufy.s[10]++;users.forEach(user=>{cov_1zyoysbufy.f[2]++;cov_1zyoysbufy.s[11]++;user.id=user._id.toString();cov_1zyoysbufy.s[12]++;delete user._id;});cov_1zyoysbufy.s[13]++;return users;})();};