var cov_2112est03j=function(){var path="/home/marta/bootcamp/collab/skylab-bootcamp-201909/staff/marta-penya/wishare/wishare-api/logic/list-wishes/index.spec.js";var hash="a02fb83f34c1b2c9498996def3680248aeae66b2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/marta/bootcamp/collab/skylab-bootcamp-201909/staff/marta-penya/wishare/wishare-api/logic/list-wishes/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:19},end:{line:4,column:31}},"4":{start:{line:5,column:19},end:{line:5,column:23}},"5":{start:{line:6,column:38},end:{line:6,column:61}},"6":{start:{line:7,column:55},end:{line:7,column:78}},"7":{start:{line:8,column:15},end:{line:8,column:34}},"8":{start:{line:11,column:0},end:{line:167,column:2}},"9":{start:{line:12,column:4},end:{line:12,column:47}},"10":{start:{line:12,column:17},end:{line:12,column:46}},"11":{start:{line:18,column:4},end:{line:46,column:6}},"12":{start:{line:19,column:8},end:{line:19,column:33}},"13":{start:{line:20,column:8},end:{line:20,column:39}},"14":{start:{line:21,column:8},end:{line:21,column:44}},"15":{start:{line:22,column:8},end:{line:22,column:41}},"16":{start:{line:23,column:8},end:{line:23,column:41}},"17":{start:{line:24,column:8},end:{line:24,column:19}},"18":{start:{line:25,column:8},end:{line:25,column:17}},"19":{start:{line:26,column:8},end:{line:26,column:16}},"20":{start:{line:29,column:8},end:{line:29,column:61}},"21":{start:{line:31,column:8},end:{line:31,column:65}},"22":{start:{line:33,column:21},end:{line:33,column:117}},"23":{start:{line:35,column:8},end:{line:35,column:20}},"24":{start:{line:37,column:8},end:{line:37,column:35}},"25":{start:{line:38,column:8},end:{line:38,column:33}},"26":{start:{line:39,column:8},end:{line:39,column:44}},"27":{start:{line:40,column:8},end:{line:40,column:47}},"28":{start:{line:42,column:21},end:{line:42,column:66}},"29":{start:{line:44,column:8},end:{line:44,column:30}},"30":{start:{line:45,column:8},end:{line:45,column:25}},"31":{start:{line:49,column:0},end:{line:76,column:2}},"32":{start:{line:50,column:19},end:{line:50,column:39}},"33":{start:{line:52,column:4},end:{line:52,column:27}},"34":{start:{line:54,column:4},end:{line:75,column:6}},"35":{start:{line:55,column:8},end:{line:55,column:32}},"36":{start:{line:56,column:8},end:{line:56,column:41}},"37":{start:{line:57,column:8},end:{line:57,column:53}},"38":{start:{line:59,column:8},end:{line:59,column:35}},"39":{start:{line:60,column:8},end:{line:60,column:44}},"40":{start:{line:61,column:8},end:{line:61,column:56}},"41":{start:{line:63,column:8},end:{line:63,column:34}},"42":{start:{line:64,column:8},end:{line:64,column:43}},"43":{start:{line:65,column:8},end:{line:65,column:55}},"44":{start:{line:67,column:8},end:{line:67,column:35}},"45":{start:{line:68,column:8},end:{line:68,column:44}},"46":{start:{line:69,column:8},end:{line:69,column:56}},"47":{start:{line:71,column:8},end:{line:71,column:41}},"48":{start:{line:72,column:8},end:{line:72,column:50}},"49":{start:{line:73,column:8},end:{line:73,column:62}},"50":{start:{line:78,column:0},end:{line:90,column:2}},"51":{start:{line:79,column:15},end:{line:79,column:41}},"52":{start:{line:81,column:4},end:{line:89,column:5}},"53":{start:{line:82,column:8},end:{line:82,column:28}},"54":{start:{line:84,column:8},end:{line:84,column:50}},"55":{start:{line:86,column:8},end:{line:86,column:30}},"56":{start:{line:87,column:8},end:{line:87,column:56}},"57":{start:{line:88,column:8},end:{line:88,column:70}},"58":{start:{line:166,column:0},end:{line:166,column:90}},"59":{start:{line:166,column:12},end:{line:166,column:89}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:32},end:{line:11,column:33}},loc:{start:{line:11,column:38},end:{line:167,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:11},end:{line:12,column:12}},loc:{start:{line:12,column:17},end:{line:12,column:46}},line:12},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:15},end:{line:18,column:16}},loc:{start:{line:18,column:27},end:{line:46,column:5}},line:18},"3":{name:"(anonymous_3)",decl:{start:{line:49,column:48},end:{line:49,column:49}},loc:{start:{line:49,column:60},end:{line:76,column:1}},line:49},"4":{name:"(anonymous_4)",decl:{start:{line:54,column:19},end:{line:54,column:20}},loc:{start:{line:54,column:27},end:{line:75,column:5}},line:54},"5":{name:"(anonymous_5)",decl:{start:{line:78,column:35},end:{line:78,column:36}},loc:{start:{line:78,column:47},end:{line:90,column:1}},line:78},"6":{name:"(anonymous_6)",decl:{start:{line:166,column:6},end:{line:166,column:7}},loc:{start:{line:166,column:12},end:{line:166,column:89}},line:166}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a02fb83f34c1b2c9498996def3680248aeae66b2"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_2112est03j.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_2112est03j.s[1]++,process);const{expect}=(cov_2112est03j.s[2]++,require('chai'));const listWishes=(cov_2112est03j.s[3]++,require('.'));const{random}=(cov_2112est03j.s[4]++,Math);const{errors:{NotFoundError}}=(cov_2112est03j.s[5]++,require('wishare-util'));const{database,ObjectId,models:{User,Wish}}=(cov_2112est03j.s[6]++,require('wishare-data'));const bcrypt=(cov_2112est03j.s[7]++,require('bcryptjs'));cov_2112est03j.s[8]++;describe('logic - list wishes',()=>{cov_2112est03j.f[0]++;cov_2112est03j.s[9]++;before(()=>{cov_2112est03j.f[1]++;cov_2112est03j.s[10]++;return database.connect(TEST_DB_URL);});let id,title,link,price,description,name,surname,email,birthday,password;cov_2112est03j.s[11]++;beforeEach(async()=>{cov_2112est03j.f[2]++;cov_2112est03j.s[12]++;name=`name-${random()}`;cov_2112est03j.s[13]++;surname=`surname-${random()}`;cov_2112est03j.s[14]++;email=`email-${random()}@mail.com`;cov_2112est03j.s[15]++;username=`username-${random()}`;cov_2112est03j.s[16]++;password=`password-${random()}`;cov_2112est03j.s[17]++;year=1999;cov_2112est03j.s[18]++;month=1;cov_2112est03j.s[19]++;day=25;cov_2112est03j.s[20]++;birthday=new Date(year,month-1,day,2,0,0,0);cov_2112est03j.s[21]++;await Promise.all([User.deleteMany(),Wish.deleteMany()]);const user=(cov_2112est03j.s[22]++,await User.create({name,surname,email,birthday,password:await bcrypt.hash(password,10)}));cov_2112est03j.s[23]++;id=user.id;cov_2112est03j.s[24]++;title=`title-${random()}`;cov_2112est03j.s[25]++;link=`link-${random()}`;cov_2112est03j.s[26]++;price=`price-${random()}@mail.com`;cov_2112est03j.s[27]++;description=`description-${random()}`;const wish=(cov_2112est03j.s[28]++,new Wish({title,link,price,description}));cov_2112est03j.s[29]++;user.wishes.push(wish);cov_2112est03j.s[30]++;await user.save();});cov_2112est03j.s[31]++;it('should succeed on retrieveing user wishes',async()=>{cov_2112est03j.f[3]++;const wishes=(cov_2112est03j.s[32]++,await listWishes(id));cov_2112est03j.s[33]++;expect(wishes).to.exist;cov_2112est03j.s[34]++;wishes.forEach(wish=>{cov_2112est03j.f[4]++;cov_2112est03j.s[35]++;expect(wish.id).to.exist;cov_2112est03j.s[36]++;expect(wish.id).to.be.a('string');cov_2112est03j.s[37]++;expect(wish.id).to.have.length.greaterThan(0);cov_2112est03j.s[38]++;expect(wish.title).to.exist;cov_2112est03j.s[39]++;expect(wish.title).to.be.a('string');cov_2112est03j.s[40]++;expect(wish.title).to.have.length.greaterThan(0);cov_2112est03j.s[41]++;expect(wish.link).to.exist;cov_2112est03j.s[42]++;expect(wish.link).to.be.a('string');cov_2112est03j.s[43]++;expect(wish.link).to.have.length.greaterThan(0);cov_2112est03j.s[44]++;expect(wish.price).to.exist;cov_2112est03j.s[45]++;expect(wish.price).to.be.a('string');cov_2112est03j.s[46]++;expect(wish.price).to.have.length.greaterThan(0);cov_2112est03j.s[47]++;expect(wish.description).to.exist;cov_2112est03j.s[48]++;expect(wish.description).to.be.a('string');cov_2112est03j.s[49]++;expect(wish.description).to.have.length.greaterThan(0);});});cov_2112est03j.s[50]++;it('should fail on wrong user id',async()=>{cov_2112est03j.f[5]++;const id=(cov_2112est03j.s[51]++,'012345678901234567890123');cov_2112est03j.s[52]++;try{cov_2112est03j.s[53]++;await listWishes(id);cov_2112est03j.s[54]++;throw Error('should not reach this point');}catch(error){cov_2112est03j.s[55]++;expect(error).to.exist;cov_2112est03j.s[56]++;expect(error).to.be.an.instanceOf(NotFoundError);cov_2112est03j.s[57]++;expect(error.message).to.equal(`user with id ${id} not found`);}});// it('should fail on incorrect name, surname, email, password, or expression type and content', () => {
//     expect(() => registerUser(1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser([])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser({})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser('')).to.throw(ContentError, 'name is empty or blank')
//     expect(() => registerUser(' \t\r')).to.throw(ContentError, 'name is empty or blank')
//     expect(() => registerUser(name, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser(name, '')).to.throw(ContentError, 'surname is empty or blank')
//     expect(() => registerUser(name, ' \t\r')).to.throw(ContentError, 'surname is empty or blank')
//     expect(() => registerUser(name, surname, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, surname, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, surname, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, surname, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, surname, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, surname, null)).to.throw(TypeError, 'null is not a string')
//     expect(() => registerUser(name, surname, '')).to.throw(ContentError, 'e-mail is empty or blank')
//     expect(() => registerUser(name, surname, ' \t\r')).to.throw(ContentError, 'e-mail is empty or blank')
//     expect(() => registerUser(name, surname, email, 1)).to.throw (TypeError, '1 is not a string')
//     expect(() => registerUser(name, surname, email, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, surname, email, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, surname, email, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, surname, email, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, surname, email, null)).to.throw(TypeError, 'null is not a string')
//     //expect(() => registerUser(name, surname, email, '')).to.throw(ContentError, 'year is empty or blank')
//     //expect(() => registerUser(name, surname, email, ' \t\r')).to.throw(ContentError, 'year is empty or blank')
//     expect(() => registerUser(name, surname, email, year, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, surname, email, year, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, surname, email, year, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, surname, email, year, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, surname, email, year, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, surname, email, year, null)).to.throw(TypeError, 'null is not a string')
//     //expect(() => registerUser(name, surname, email, year, '')).to.throw(ContentError, 'month is empty or blank')
//     //expect(() => registerUser(name, surname, email, year, ' \t\r')).to.throw(ContentError, 'month is empty or blank')
//     expect(() => registerUser(name, surname, email, year, month, 1)).to.throw(TypeError, '1 is not a string')
//     expect(() => registerUser(name, surname, email, year, month, true)).to.throw(TypeError, 'true is not a string')
//     expect(() => registerUser(name, surname, email, year, month, [])).to.throw(TypeError, ' is not a string')
//     expect(() => registerUser(name, surname, email, year, month, {})).to.throw(TypeError, '[object Object] is not a string')
//     expect(() => registerUser(name, surname, email, year, month, undefined)).to.throw(TypeError, 'undefined is not a string')
//     expect(() => registerUser(name, surname, email, year, month, null)).to.throw(TypeError, 'null is not a string')
//     //expect(() => registerUser(name, surname, email, year, month,  '')).to.throw(ContentError, 'day is empty or blank')
//     //expect(() => registerUser(name, surname, email, year, month, ' \t\r')).to.throw(ContentError, 'day is empty or blank')
//     expect(() => registerUser(name, surname, email, year, month, day, '')).to.throw(ContentError, 'password is empty or blank')
//     expect(() => registerUser(name, surname, email, year, month, day, ' \t\r')).to.throw(ContentError, 'password is empty or blank')
//     expect(() => registerUser(name, surname, email, year, month, day, password, '')).to.throw(ContentError, 'passwordconfirm is empty or blank')
//     expect(() => registerUser(name, surname, email, year, month, day, password, ' \t\r')).to.throw(ContentError, 'passwordconfirm is empty or blank')
// })
// TODO other cases
cov_2112est03j.s[58]++;after(()=>{cov_2112est03j.f[6]++;cov_2112est03j.s[59]++;return Promise.all([User.deleteMany(),Wish.deleteMany()]).then(database.disconnect);});});